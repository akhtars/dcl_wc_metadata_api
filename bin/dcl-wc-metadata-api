#!/usr/bin/env ruby

# Copyright 2015 Trustees of Dartmouth College
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative '../lib/dcl_wc_metadata_api'

#TODO: Enhance subcommand parsing to allow options after subcommand

# Define command-line options and documentation
SUB_COMMANDS = %w(read create)
global_opts = Clop::options do
  banner <<-EOS
dcl-wc-metadata-api, DCL-local WorldCat Metadata API tools.

Usage:
  dcl-wc-metadata-api [options] <command> <input>

Commands include:
  read    Download record(s) from OCLC
  create  Upload new record(s) to OCLC and set holding(s)

For read, <input> is one or more record numbers (separated only by a comma) or\
 the path of a file containing a list of record numbers, one per line. For\
 create, <input> is the path of a valid MARCXML file containing one or more\
 records.

Options include:
EOS
  opt :verbose, "Print success status for each item", :short => "-v"
  opt :debug, "Save request URL and body to output log", :short => "-d"
  stop_on SUB_COMMANDS
end

input = ""

manager = DCL_WC_METADATA_API::Manager.new(global_opts)

# Parse command-line input
cmd = ARGV.shift
cmd_opts = case cmd

  when nil
    Clop::die "No command given. Select one of: " + SUB_COMMANDS.join(", ")
    
  # Read API operation
  when "read"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    manager.read(input)

  # Create API operation
  when "create"
    Clop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    input = Nokogiri::XML(File.read(ARGV.shift))
    count = input.xpath("count(//marc:record)",
      "marc" => "http://www.loc.gov/MARC21/slim"
    )
    Clop::die "No well-formed MARCXML records found as input" if count == 0
    manager.create(input)
    
  # Any other command
  else
    Clop::die "Unknown subcommand #{cmd.inspect}. Select one of: " + \
    SUB_COMMANDS.join(", ")
    
  end

