#!/usr/bin/env ruby

# Copyright 2015 Trustees of Dartmouth College
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require_relative '../lib/dcl_wc_metadata_api'

#TODO: Refactor single/multiple operations as functions or child classes
#TODO: Enhance subcommand parsing to allow options after subcommand

# Define command-line options and documentation
SUB_COMMANDS = %w(read create)
global_opts = Clop::options do
  banner <<-EOS
dcl-wc-metadata-api, DCL-local WorldCat Metadata API tools.

Usage:
  dcl-wc-metadata-api [options] <command> <input>

Commands include:
  read    Download record(s) from OCLC
  create  Upload new record(s) to OCLC

For read, <input> is a numeric record number or the path of a file containing a\
 list of numeric record numbers. For create, <input> is the path of a valid\
 MARCXML file containing one or more records.

Options include:
EOS
  opt :verbose, "Print success status for each item", :short => "-v"
  stop_on SUB_COMMANDS
end

input = ""

# Set up API client
credentials = YAML.load(
  File.open(File.dirname(__FILE__) + "/../config/credentials.yml", "r")
)
c = credentials["credentials"]

client = WC_METADATA_API::Client.new(
  :wskey => c["key"],
  :secret => c["secret"],
  :principalID => c["principalid"],
  :principalDNS => c["principaldns"],
  :debug => false
)

# Write to output file
def log_output(response_data, response_status, cmd, successes, failures)
  any_records = (successes > 0 ? true : false) # Check for any successes
  
  time = Time.now
  t = time.strftime("%Y%m%d%H%M%S")
 
  if any_records
    d_filename = "wc-" + cmd + "-" + t + ".xml"
    d = File.new(d_filename, "w+:UTF-8")
    d.write(response_data)
    d.close
  end
  
  s_filename = "wc-" + cmd + "-" + t + "-log.txt"
  s = File.new(s_filename, "w+:UTF-8")
  s.write(response_status)
  s.close
 
  verbs = { "read" => "Read", "create" => "Created" }
    
  puts "OCLC WorldCat Metadata API: " + cmd.capitalize + " operation"
  puts verbs[cmd] + " " + successes.to_s + \
    (successes != 1 ? " records, " : " record, ") + failures.to_s + " failed"
  puts "Records written to " + d_filename if any_records
  puts "Log written to " + s_filename
end

# Parse command-line input
cmd = ARGV.shift
successes = 0
failures = 0
cmd_opts = case cmd

  when nil
    Clop::die "No command given. Select one of: " + SUB_COMMANDS.join(", ")
    
  # Read API operation
  when "read"
    Clop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    response_status = ""
    response_data = Nokogiri::XML::Document.parse(
      "<collection xmlns=\"http://www.loc.gov/MARC21/slim\">"
    )

    case input
 
    # Single record number
    when /^[\d]+$/ #TODO: Extract digit string
      r = client.WorldCatGetBibRecord(
        :oclcNumber => input,
        :holdingLibraryCode => c["holdingLibraryCode"],
        :schema => c["schema"],
        :instSymbol => c["instSymbol"]
      )
      rc = Nokogiri::XML::Document.parse(client.LastResponseCode.body)
      if client.LastResponseCode.code == "200"
        response_data.root << rc.at_xpath("//marc:record",
            "marc" => "http://www.loc.gov/MARC21/slim"
        )
        response_status << input + ": read\n"
        puts input + ": found" if global_opts[:verbose]
        successes += 1
      else
        response_status << input + ": failed\n"
        response_status << rc.to_s
        puts input + ": failed" if global_opts[:verbose]
        failures += 1
      end
  
    # List of record numbers in file
    else
      numbers = []    
      File.open(input, "r").each { |line| 
        line.scan(/[\d]+/) { |match| numbers << match } # Extract digit strings
      }
      
      numbers.each do |number|        
        r = client.WorldCatGetBibRecord(
          :oclcNumber => number,
          :holdingLibraryCode => c["holdingLibraryCode"],
          :schema => c["schema"],
          :instSymbol => c["instSymbol"]
        )
        rc = Nokogiri::XML::Document.parse(client.LastResponseCode.body)
        if client.LastResponseCode.code == "200"
          response_data.root << rc.at_xpath("//marc:record",
              "marc" => "http://www.loc.gov/MARC21/slim"
          )
          response_status << number + ": read\n"
          puts number + ": found" if global_opts[:verbose]
          successes += 1
        else
          response_status << number + ": failed\n"
          response_status << rc.to_s
          puts number + ": failed" if global_opts[:verbose]
          failures += 1
        end
      end
      
      #TODO: Multiple record numbers on command line?
    end
 
    log_output(response_data, response_status, cmd, successes, failures)

  # Create API operation
  when "create"
    Clop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    input = Nokogiri::XML(File.read(ARGV.shift))
    response_status = ""
    response_data = Nokogiri::XML::Document.parse(
      "<collection xmlns=\"http://www.loc.gov/MARC21/slim\">"
    )
    count = input.xpath("count(//marc:record)",
      "marc" => "http://www.loc.gov/MARC21/slim"
    )
     
    case count
    
    # No well-formed records
    when 0
      puts "Create operation: No well-formed MARCXML records found as input"
    
    # One or more records
    else
      records = {}
      input.xpath("//marc:record", 
        "marc" => "http://www.loc.gov/MARC21/slim"
      ).each do |record|
          id = record.at_xpath(
            "marc:datafield[@tag='035']/marc:subfield[@code='a']",
            "marc" => "http://www.loc.gov/MARC21/slim").text
          records[id] = record
        end

      records.each_pair do |id, record|
        if record.namespace_definitions.length == 0
          record["xmlns:marc"] = "http://www.loc.gov/MARC21/slim"
        end
        r = client.WorldCatAddBibRecord(
          :holdingLibraryCode => c["holdingLibraryCode"],
          :schema => c["schema"],
          :instSymbol => c["instSymbol"],
          :xRecord => record.to_s
        )
        rc = Nokogiri::XML::Document.parse(client.LastResponseCode.body)
        if client.LastResponseCode.code == "201"
          response_data.root << rc.at_xpath("//marc:record",
              "marc" => "http://www.loc.gov/MARC21/slim"
          )
          response_status << id + ": created\n"
          puts id + ": created" if global_opts[:verbose]
          successes += 1
        else
          response_status << id + ": failed\n"
          response_status << rc.to_s
          puts id + ": failed" if global_opts[:verbose]
          failures += 1
        end
      end

    end
   
    if count > 0
      log_output(response_data, response_status, cmd, successes, failures)
    end
    
  # Any other command
  else
    Clop::die "Unknown subcommand #{cmd.inspect}. Select one of: " + \
    SUB_COMMANDS.join(", ")
    
  end

