#!/usr/bin/env ruby

require_relative '../lib/dcl_wc_metadata_api'

# Define command-line options and documentation
SUB_COMMANDS = %w(read create)
global_opts = Trollop::options do
  banner <<-EOS
dcl-wc-metadata-api, DCL-local WorldCat Metadata API tools.

Usage:
  dcl-wc-metadata-api [options] <command> <input>

Commands include:
  read    Download record(s) from OCLC
  create  Upload new record(s) to OCLC

For read, <input> is a numeric record number or the path of a file containing a\
 list of numeric record numbers. For create, <input> is the path of a file\
 containing one or more MARCXML records.

Options include:
EOS
  opt :verbose, "Print full API response to console", :short => "-v"
  stop_on SUB_COMMANDS
end

input = ""

# Set up API client
credentials = YAML.load(
  File.open(File.dirname(__FILE__) + "/../config/credentials.yml", "r")
)
c = credentials["credentials"]

client = WC_METADATA_API::Client.new(
  :wskey => c["key"],
  :secret => c["secret"],
  :principalID => c["principalid"],
  :principalDNS => c["principaldns"],
  :debug => false
)

# Write to output file
def log_output(response, cmd)
  time = Time.now
  t = time.strftime("%Y%m%d%H%M%S")
  filename = "wc-" + cmd + "-" + t + ".xml"
  f = File.new(filename, "w+:UTF-8")

  f.write(response)
  f.close
    
  puts "OCLC WorldCat Metadata API: " + cmd.capitalize + " bibliographic resource"
  puts "API response written to " + filename
end

# Parse command-line input
cmd = ARGV.shift
cmd_opts = case cmd

  when nil
    Trollop::die "No command given. Select one of: " + SUB_COMMANDS.join(", ")
    
  # Read API operation
  when "read"
    Trollop::die "OCLC record number(s) required" if ARGV.empty?
    input = ARGV.shift
    response = Nokogiri::XML::Document.parse(
      "<collection xmlns=\"http://www.loc.gov/MARC21/slim\">"
    )

    case input
 
    # Single record number
    when /^[\d]+$/
      r = Nokogiri::XML(client.WorldCatGetBibRecord(
        :oclcNumber => input,
        :holdingLibraryCode => c["holdingLibraryCode"],
        :schema => c["schema"],
        :instSymbol => c["instSymbol"]
      ))
      response.root << r.at_xpath("//marc:record",
          "marc" => "http://www.loc.gov/MARC21/slim"
      )
  
    # List in file
    else
      numbers = []    
      File.open(input, "r").each { |line| 
        line.scan(/[\d]+/) { |match| numbers << match } # Extract digit strings
      }
      numbers.each { |number|        
        r = Nokogiri::XML(client.WorldCatGetBibRecord(
          :oclcNumber => number,
          :holdingLibraryCode => c["holdingLibraryCode"],
          :schema => c["schema"],
          :instSymbol => c["instSymbol"]
        ))
        response.root << r.at_xpath("//marc:record",
          "marc" => "http://www.loc.gov/MARC21/slim"
        )
      }
      
      #TODO: Exception handling
      #TODO: Multiple record numbers on command line?
    end

    if global_opts[:verbose]
      puts response.to_xml
    end
    
    log_output(response, cmd) #TODO: Exception handling based on status code

  # Create API operation
  when "create"
    Trollop::die "Filename of MARCXML record(s) required" if ARGV.empty?
    #TODO

  # Any other command
  else
    Trollop::die "Unknown subcommand #{cmd.inspect}. Select one of: " + \
    SUB_COMMANDS.join(", ")
    
  end

